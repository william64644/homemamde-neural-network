#include <iostream>
#include <vector>
#include <stdlib.h>
//#include <SFML/Graphics.hpp>
#include <cmath>

#include "headers/Layer.h"
#include "headers/Network.h"
#include "headers/repack_network.h"
#include "headers/read_file.h"
#include "headers/variate.h"
#include "headers/variate_matrix.h"
#include "headers/print_matrix.h"
#include "headers/dpkg.h"
#include "headers/get_funneled_trained_network.h"
#include "headers/ask_network_input_from_user.h"
#include "headers/matrix_randomizer.h"
#include "headers/split.h"
#include "headers/in.h"
#include "headers/print_vector.h"

#include <opencv4/opencv2/opencv.hpp>

// ssssssssssssss
// output.shrink_to_fit();


string get_merged_strings(vector<string> strings)
{
	string output;

	for (unsigned int i = 0; i < strings.size(); i++)
	{
		output += strings[i];
		output += ' ';
	}
	output.resize(output.size() -1);
	return output;
}

vector<string> get_tokens_from_string(string input)
{
	vector<string> words = split(input);
	
	vector<string> output;
	
	for (unsigned int i = 0; i < words.size(); i++)
	{
		if (! in(words[i], output))
		{
			output.push_back(words[i]);
		}
	}
	return output;
}

vector<double> get_vectorized_string(vector<string> tokens, vector<string> input)
{
	vector<double> output(tokens.size());
	
	for (unsigned int i = 0; i < tokens.size(); i++)
	{
		for (unsigned int j = 0; j < input.size(); j++)
		{
			if (input[j] == tokens[i])
			{
				output[i] ++;
			}
		}
	}
	return output;
}


using namespace std;

int main()
{

	const string phrase1 = "we carried the cargo one by one";
	const string phrase2 = "we carry cargo from time to time";

	string full_pharese = get_merged_strings({phrase1, phrase2});
	cout << full_pharese;

	vector<string> phrase_vector = split(full_pharese);

	vector<string> tokens = get_tokens_from_string(full_pharese);

	print_vector(get_vectorized_string(tokens, phrase_vector));



	Layer input(tokens.size(), 4, "Input");
	Layer dummy_output(4, 0, "Dummy Output");

	input.neurons = get_vectorized_string(tokens, phrase_vector);

	Network net({input, dummy_output});
	matrix_randomizer(net.layers[0].weights);

	net.run_network();

	net.print_network();

	return 0;
}
// ssssssssssss